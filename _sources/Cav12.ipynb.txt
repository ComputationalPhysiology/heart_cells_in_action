{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# L-type Ca channel\n",
    "\n",
    "https://en.wikipedia.org/wiki/Cav1.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import utils\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['tentusscher_noble_noble_panfilov_2006_c.ode',\n",
       " 'tentusscher_2004_mcell_updated.ode',\n",
       " 'paci_hyttinen_aaltosetala_severi_ventricularVersion.ode']"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "utils.list_ode_models()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_name = \"tentusscher_noble_noble_panfilov_2006_c\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded ODE model 'tentusscher_noble_noble_panfilov_2006_c' with:\n",
      "     Num full states: 17\n",
      "      Num parameters: 46\n"
     ]
    }
   ],
   "source": [
    "model = utils.load_model(model_name, rebuild=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "t, u = model.solve(t_start=0, t_end=1000.0, dt=0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15\n"
     ]
    }
   ],
   "source": [
    "V_index = model.state_index(\"V\")\n",
    "print(V_index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "V = u[:, V_index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f9b93cc8520>]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "ax.plot(t, V)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "monitor = model.monitor(u, t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10001, 17)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "u.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10001, 86)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "monitor.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['E_Na', 'E_K', 'E_Ks', 'E_Ca', 'alpha_K1', 'beta_K1', 'xK1_inf', 'i_K1', 'i_Kr', 'xr1_inf', 'alpha_xr1', 'beta_xr1', 'tau_xr1', 'xr2_inf', 'alpha_xr2', 'beta_xr2', 'tau_xr2', 'i_Ks', 'xs_inf', 'alpha_xs', 'beta_xs', 'tau_xs', 'i_Na', 'm_inf', 'alpha_m', 'beta_m', 'tau_m', 'h_inf', 'alpha_h', 'beta_h', 'tau_h', 'j_inf', 'alpha_j', 'beta_j', 'tau_j', 'i_b_Na', 'i_CaL', 'd_inf', 'alpha_d', 'beta_d', 'gamma_d', 'tau_d', 'f_inf', 'tau_f', 'alpha_fCa', 'beta_fCa', 'gama_fCa', 'fCa_inf', 'tau_fCa', 'd_fCa', 'i_b_Ca', 'i_to', 's_inf', 'tau_s', 'r_inf', 'tau_r', 'i_NaK', 'i_NaCa', 'i_p_Ca', 'i_p_K', 'i_rel', 'i_up', 'i_leak', 'g_inf', 'd_g', 'Ca_i_bufc', 'Ca_sr_bufsr', 'Istim', 'i_Stim', 'dXr1_dt', 'dXr2_dt', 'dXs_dt', 'dm_dt', 'dh_dt', 'dj_dt', 'dd_dt', 'df_dt', 'dfCa_dt', 'ds_dt', 'dr_dt', 'dg_dt', 'dCa_i_dt', 'dCa_SR_dt', 'dNa_i_dt', 'dV_dt', 'dK_i_dt']\n"
     ]
    }
   ],
   "source": [
    "# List all monitor names\n",
    "print(model.monitor_names())\n",
    "\n",
    "i_CaL_index = model.monitor_index(\"i_CaL\")\n",
    "i_CaL = monitor[:, i_CaL_index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f9bc03544c0>]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "ax.plot(t, i_CaL)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['P_kna', 'g_K1', 'g_Kr', 'g_Ks', 'g_Na', 'g_bna', 'g_CaL', 'g_bca', 'g_to', 'K_mNa', 'K_mk', 'P_NaK', 'K_NaCa', 'K_sat', 'Km_Ca', 'Km_Nai', 'alpha', 'gamma', 'K_pCa', 'g_pCa', 'g_pK', 'Buf_c', 'Buf_sr', 'Ca_o', 'K_buf_c', 'K_buf_sr', 'K_up', 'V_leak', 'V_sr', 'Vmax_up', 'a_rel', 'b_rel', 'c_rel', 'tau_g', 'Na_o', 'IstimAmplitude', 'IstimEnd', 'IstimPeriod', 'IstimPulseDuration', 'IstimStart', 'Cm', 'F', 'R', 'T', 'V_c', 'K_o'])\n"
     ]
    }
   ],
   "source": [
    "parameters = model.default_parameters()\n",
    "print(parameters.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Update paramameter g_CaL from 0.000175 to 3.5000000000000004e-05\n"
     ]
    }
   ],
   "source": [
    "parameters[\"g_CaL\"] *= 0.2\n",
    "t2, u2 = model.solve(t_start=0, t_end=1000.0, dt=0.1, parameters=parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "V_kr_block = u2[:, V_index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f9b70359d30>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "ax.plot(t, V, label=\"Original\")\n",
    "ax.plot(t2, V_kr_block, label=\"Kr block\")\n",
    "ax.legend(loc=\"best\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "import ipywidgets as widgets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f77c189738b14d0a9fabd42fc966f77d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Canvas(toolbar=Toolbar(toolitems=[('Home', 'Reset original view', 'home', 'home'), ('Back', 'Back to previous …"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "05eaae465a54468ea0fadce163e5d14c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(FloatSlider(value=0.0, description='block', max=1.0, min=-1.0), Output()), _dom_classes=…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib widget\n",
    "fig, ax = plt.subplots(2, 1, sharex=True)\n",
    "ax[0].plot(t, V, label=\"Original\")\n",
    "line_V, = ax[0].plot(t, V, label=\"CaL block\")\n",
    "ax[0].legend(loc=\"best\")\n",
    "ax[0].set_title(\"Voltage\")\n",
    "ax[1].plot(t, i_CaL, label=\"Original\")\n",
    "line_iCaL, = ax[1].plot(t, i_CaL, label=\"CaL block\")\n",
    "ax[1].legend(loc=\"best\")\n",
    "ax[1].set_title(\"i CaL\")\n",
    "\n",
    "@widgets.interact(block=(-1, 1, 0.1))\n",
    "def Kr_block(block):\n",
    "    parameters = model.default_parameters().copy()\n",
    "    parameters[\"g_CaL\"] *= (1 + block)\n",
    "    t2, u2 = model.solve(t_start=0, t_end=1000.0, dt=0.1, parameters=parameters)\n",
    "    monitor = model.monitor(u2, t2)\n",
    "    i_CaL_block = monitor[:, i_CaL_index]\n",
    "    V_CaL_block = u2[:, V_index]\n",
    "    line_V.set_ydata(V_CaL_block)\n",
    "    line_iCaL.set_ydata(i_CaL_block)\n",
    "    fig.canvas.draw_idle()\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
